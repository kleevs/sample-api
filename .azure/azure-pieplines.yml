parameters:
  - name: env
    displayName: Environnement
    type: string
    default: dev
    values:
      - release
      - dev
      - qual
      - prod

trigger: none

resources:
  repositories:
    - repository: templates
      name: "Factory U/cicd"
      ref: "refs/tags/1.8.1"
      trigger: none
      type: git

variables:
  # Variables
  projectname: Orano.MyProject.Api
  buildConfiguration: "Release"

  # Condition
  isPR: ${{ startsWith(variables['Build.SourceBranch'], 'refs/pull/') }}
  isDev: ${{ and(not(eq(variables.isPR, true)), in(parameters.env, 'dev', 'qual', 'prod')) }}
  isQual: ${{ and(not(eq(variables.isPR, true)), in(parameters.env, 'qual', 'prod')) }}
  isProd: ${{ and(not(eq(variables.isPR, true)), in(parameters.env, 'prod')) }}

extends:
  template: templates/aks-pipelines.yml@templates
  parameters:
    image: dotnet_sdk_jre:7.9.2
    sonarqube:
      enabled: true
      inputs:
        SonarQube: "SonarQube For FactoryU"
        scannerMode: "MSBuild"
        projectKey: "factoryu:myprojectapi"
        extraProperties: |
          sonar.cpd.exclusions=**/src/Orano.MyProject.DataBase/Migrations/*,tests/*,**/Migrations/*,src/Orano.MyProject.DataBase/Migrations/*
          sonar.exclusions=**/*.cshtml,src/Orano.MyProject.DataBase/Migrations/*,**/Migrations/*,**/src/Orano.MyProject.DataBase/Migrations/*,tests/*,src/Orano.MyProject.Api/Endpoints/*,src/Orano.MyProject.Api/Program.cs,src/Orano.MyProject.Api/Tools/**,src/Orano.MyProject.Api/Policies/**,,src/Orano.MyProject.Api/Converters/**
          sonar.cs.opencover.reportsPaths=$(Build.Repository.LocalPath)/**/coverage.opencover.xml
          sonar.qualitygate.wait=true

    build:
      publish: ${{ eq(variables.isPR, false) }}
      steps:
        - task: Assembly-Info-NetCore@3
          inputs:
            Path: "$(Build.SourcesDirectory)"
            FileNames: "src/**/*.csproj"
            InsertAttributes: false
            FileEncoding: "auto"
            WriteBOM: false
            VersionNumber: "$(Build.BuildNumber)"
            FileVersionNumber: "$(Build.BuildNumber)"
            LogLevel: "verbose"
            FailOnWarning: false
            DisableTelemetry: false

        - task: DotNetCoreCLI@2
          displayName: Restore Project
          inputs:
            command: "restore"
            projects: "**/*.csproj"
            feedsToUse: "config"
            nugetConfigPath: "nuget.config"

        - task: DotNetCoreCLI@2
          displayName: Install EF Tool
          inputs:
            command: custom
            custom: "tool "
            arguments: install --global dotnet-ef --version 7.0.15

        - task: DotNetCoreCLI@2
          displayName: Install Report Generator Tool
          inputs:
            command: custom
            custom: "tool "
            arguments: install --global dotnet-reportgenerator-globaltool --version 5.2.1.0

        - task: DotNetCoreCLI@2
          displayName: Build The Project
          inputs:
            command: "build"
            projects: "**/*.csproj"
            arguments: "--configuration $(BuildConfiguration)"

        - script: |
            dotnet test --collect "XPlat Code Coverage;Format=cobertura,opencover"
          displayName: Run tests

        - task: PublishCodeCoverageResults@1
          displayName: "Publish Code Coverage Results"
          inputs:
            codeCoverageTool: 'Cobertura'
            summaryFileLocation: '**/coverage.cobertura.xml'

        - task: DotNetCoreCLI@2
          displayName: "Publish API Project"
          condition: and(succeeded(), eq(variables.isPR, 'False'))
          inputs:
            command: "publish"
            publishWebProjects: false
            zipAfterPublish: false
            projects: "**/${{ variables.projectname }}.csproj"
            arguments: "--configuration $(BuildConfiguration)"

    release:
      docker:
        name: myprojectapi
        version: $(Build.BuildNumber)
        azureSubscription: 'fc-oay-appreg-dev-myproject-01'
        registry: 'fcoaydevacrmyproject01.azurecr.io'

    deploy:
      dev:
        displayName: Deploy Dev
        environment: Dev
        enabled: ${{ eq(variables.isDev, true) }}
        helm:
          pool: 'FR-OAY-NPRD-AKS-AGENT-01'
          serviceConnection: 'fc-oay-akssvc-dev-myproject-01'
          namespace: ns-dev-myproject
          releaseName: myprojectapi
          valueFile: .azure/values.yaml
          chartPath: '/chart-helm/api'
          overrideValues: |
            image.registry=fcoaydevacrmyproject01.azurecr.io
            image.name=myprojectapi
            image.tag=$(Build.BuildNumber)
            config.ASPNETCORE_ENVIRONMENT=Development
            config.DOTNET_ENVIRONMENT=Development
            ingress.hosts[0].host=myproject-api-dev.orano.cloud
